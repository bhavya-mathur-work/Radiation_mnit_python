# -*- coding: utf-8 -*-
"""Image_Processing_Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n8UcTLNF380tXXKV6DarHWe2kPoK7KfG

This notebook demonstrates how to analyze solar magnetic field data to predict
the likelihood of solar flares occurring in active regions on the Sun.

Learning Objectives:
- Understand solar magnetic fields and their role in flare formation
- Learn to identify Polarity Inversion Lines (PILs)
- Calculate key flare prediction parameters
- Make flare potential assessments based on observational data

Importing Libraries
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.ndimage import gaussian_filter, binary_dilation, sobel
from astropy.io import fits
from skimage.morphology import remove_small_objects

""" Load data"""

br = fits.getdata("/hmi.sharp_cea_720s.11142.20240507_000000_TAI.Br.fits")
bphi = fits.getdata("/hmi.sharp_cea_720s.11142.20240507_000000_TAI.Bphi.fits") # B phi
btheta = fits.getdata("/hmi.sharp_cea_720s.11142.20240507_000000_TAI.Btheta.fits") # B theta

"""Smooth Br and detect PILs"""

br_smooth = gaussian_filter(br, sigma=1)
pos = br_smooth > 100
neg = br_smooth < -100

"""Expanding Area using Binary dilation"""

dilated_pos = binary_dilation(pos, iterations=3)
dilated_neg = binary_dilation(neg, iterations=3)

pil = remove_small_objects(dilated_pos & dilated_neg, min_size=50)

"""Visualize PIL"""

plt.figure(figsize=(10, 6))
img = plt.imshow(br_smooth, cmap='seismic')
plt.contour(pil, colors='green', linewidths=1)
plt.colorbar(img, label='Br (Gauss)')
plt.title("PILs on Br map")
plt.show()

"""Flare Potential Indicators"""

# === Flare potential indicators ===

# 1. Total unsigned vertical flux near PIL
pix_cm = 3.6e7  # CEA pixel size in cm
area_cm2 = pix_cm**2
zone = binary_dilation(pil, iterations=5)
unsigned_flux = np.sum(np.abs(br[zone])) * area_cm2
print(f"Unsigned flux (Br): {unsigned_flux:.2e} Mx")

# 2. Mean transverse field near PIL
bt = np.sqrt(bphi**2 + btheta**2)
mean_bt = np.mean(bt[zone])
print(f"Mean transverse field near PIL: {mean_bt:.1f} G")

# 3. R-value: gradient-weighted flux
grad = np.hypot(sobel(br, axis=0), sobel(br, axis=1))
r_val = np.sum(grad[pil]) * pix_cm
print(f"R-value (G·cm): {r_val:.2e}")

"""Comparing Values"""

print("\n--- Flare Potential Assessment ---")

if unsigned_flux > 1e21:
    print(f"High unsigned magnetic flux ({unsigned_flux:.2e} Mx) → High flare potential")
else:
    print(f"Low/moderate unsigned flux ({unsigned_flux:.2e} Mx) → Lower flare potential")

if mean_bt > 150:
    print(f"Strong transverse field near PIL ({mean_bt:.1f} G) → High magnetic shear → Higher flare risk")
else:
    print(f"Weak/moderate transverse field ({mean_bt:.1f} G) → Lower shear")

if r_val > 1e5:
    print(f"High R-value ({r_val:.2e} G·cm) → Strong field gradients → High flare likelihood")
else:
    print(f"Low R-value ({r_val:.2e} G·cm) → Low flare potential")

# Summary decision (simple logic)
summary = int(unsigned_flux > 5e21) + int(mean_bt > 150) + int(r_val > 1e5)
if summary >= 2:
    print(f"\n✅ Overall: This Active Region has HIGH flare potential. ({summary}/3)")
else:
    print(f"\n⚠️ Overall: This Active Region has LOW or MODERATE flare potential.({summary}/3)")